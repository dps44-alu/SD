import sys
import socket
import time
import threading
import os


CP_STATUS = None
CP_ADDRESS = None
CP_PRICE = None
CP_ID = None
CURRENT_DRIVER = None
CHARGING_INFO = {"kwh": 0, "cost": 0}
RUNNING = True
PAUSED = False  # Flag para pausar la actualizaci√≥n de pantalla


def clear_screen():
    """Limpiar pantalla de forma multiplataforma"""
    os.system('cls' if os.name == 'nt' else 'clear')


def get_status_display(status):
    """Obtener representaci√≥n visual del estado"""
    status_map = {
        "ACTIVE": ("üü¢", "DISPONIBLE", "verde"),
        "BUSY": ("üîµ", "CARGANDO", "azul"),
        "OUT_OF_ORDER": ("üü†", "FUERA DE SERVICIO", "naranja"),
        "BROKEN": ("üî¥", "AVERIADO", "rojo"),
        "INACTIVE": ("‚ö™", "INACTIVO", "gris")
    }
    return status_map.get(status, ("‚ö´", "DESCONOCIDO", "negro"))


def display_monitor_screen():
    """Mostrar pantalla de monitorizaci√≥n actualizada continuamente"""
    global CP_ID, CP_ADDRESS, CP_PRICE, CP_STATUS, CURRENT_DRIVER, CHARGING_INFO, PAUSED
    
    while RUNNING:
        # Solo actualizar si no est√° pausada
        if not PAUSED:
            clear_screen()
            
            icon, status_text, color_text = get_status_display(CP_STATUS)
            
            print(f"{'='*70}")
            print(f"  MONITOR CP - SISTEMA DE MONITORIZACI√ìN EN TIEMPO REAL")
            print(f"{'='*70}")
            print(f"  ID del Punto de Carga: {CP_ID}")
            print(f"  Direcci√≥n: {CP_ADDRESS}")
            print(f"  Precio: {CP_PRICE}‚Ç¨/kWh")
            print(f"{'='*70}")
            print(f"  Estado: {icon} {status_text} ({color_text})")
            print(f"{'='*70}")
            
            # Mostrar informaci√≥n de carga si est√° activo
            if CP_STATUS == "BUSY" and CURRENT_DRIVER:
                print(f"\n  üìä CARGA EN PROGRESO")
                print(f"  {'-'*66}")
                print(f"    Conductor: {CURRENT_DRIVER}")
                print(f"    Consumo actual: {CHARGING_INFO['kwh']:.2f} kWh")
                print(f"    Importe acumulado: {CHARGING_INFO['cost']:.2f}‚Ç¨")
                print(f"  {'-'*66}")
            elif CP_STATUS == "ACTIVE":
                print(f"\n  ‚úÖ Punto de carga listo para recibir solicitudes")
            elif CP_STATUS == "OUT_OF_ORDER":
                print(f"\n  ‚ö†Ô∏è  Punto de carga fuera de servicio temporalmente")
            elif CP_STATUS == "BROKEN":
                print(f"\n  ‚ùå Punto de carga averiado - requiere atenci√≥n")
            elif CP_STATUS == "INACTIVE":
                print(f"\n  ‚è∏Ô∏è  Punto de carga inactivo")
            
            print(f"\n{'='*70}")
            print(f"  CONTROLES:")
            print(f"  - Presiona '1' + ENTER para solicitar carga manual")
            print(f"  - Presiona '2' + ENTER para ver estado detallado")
            print(f"  - Presiona '0' + ENTER para salir")
            print(f"{'='*70}")
            print(f"\n  Actualizaci√≥n autom√°tica cada 1 segundo...")
            print(f"  (La pantalla se actualiza en tiempo real)")
        
        time.sleep(1)


def get_config_from_central(central_ip, central_port, cp_id):
    """Obtiene la configuraci√≥n completa desde Central"""
    global CP_PRICE, CP_ADDRESS, CP_STATUS
    
    max_retries = 10
    retry_count = 0
    
    while retry_count < max_retries:
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as client:
                client.settimeout(3)
                client.connect((central_ip, central_port))
                
                msg = f"REQUEST_CONFIG#{cp_id}"
                client.sendall(msg.encode())
                
                response = client.recv(1024).decode()
                parts = response.split("#")
                
                if parts[0] == "CONFIG_OK" and len(parts) == 4:
                    CP_ADDRESS = parts[1]
                    CP_PRICE = float(parts[2])
                    CP_STATUS = parts[3]
                    
                    print(f"[Monitor] Configuraci√≥n obtenida de Central:")
                    print(f"          ID: {cp_id}")
                    print(f"          Direcci√≥n: {CP_ADDRESS}")
                    print(f"          Precio: {CP_PRICE}‚Ç¨/kWh")
                    print(f"          Estado: {CP_STATUS}")
                    return True
                elif parts[0] == "CONFIG_NOT_FOUND":
                    print(f"[Monitor] El CP {cp_id} no existe en la base de datos")
                    return False
                    
        except Exception as e:
            retry_count += 1
            print(f"[Monitor] Intento {retry_count}/{max_retries} fall√≥: {e}")
            time.sleep(1)
    
    print("[Monitor] No se pudo obtener la configuraci√≥n de Central")
    return False


def send_config_to_engine(engine_ip, engine_port, cp_id):
    """Env√≠a la configuraci√≥n al Engine"""
    global CP_PRICE, CP_ADDRESS
    
    max_retries = 10
    retry_count = 0
    
    while retry_count < max_retries:
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as client:
                client.settimeout(2)
                client.connect((engine_ip, engine_port))
                
                msg = f"SET_CONFIG#{cp_id}#{CP_PRICE}#{CP_ADDRESS}"
                client.sendall(msg.encode())
                
                response = client.recv(1024).decode()
                
                if response == "CONFIG_OK":
                    print(f"[Monitor] Configuraci√≥n enviada correctamente al Engine")
                    return True
                    
        except Exception as e:
            retry_count += 1
            print(f"[Monitor] Intento {retry_count}/{max_retries} enviando config a Engine: {e}")
            time.sleep(1)
    
    print("[Monitor] No se pudo enviar la configuraci√≥n al Engine")
    return False


def connect_central(central_ip, central_port, cp_id):
    """Se conecta y autentica con central"""
    global CP_PRICE, CP_ADDRESS, CP_STATUS
    
    central_conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    central_conn.connect((central_ip, central_port))
    print(f"[Monitor] Conectado a Central {central_ip}:{central_port}")

    msg = f"AUTH#{cp_id}#{CP_ADDRESS}#{CP_PRICE}#{CP_STATUS}"
    central_conn.sendall(msg.encode())
    print(f"[Monitor] Enviando AUTH a Central:")
    print(f"          ID: {cp_id}")
    print(f"          Direcci√≥n: {CP_ADDRESS}")
    print(f"          Precio: {CP_PRICE}‚Ç¨/kWh")
    print(f"          Estado: {CP_STATUS}")

    response = central_conn.recv(1024).decode()
    print(f"[Monitor] Respuesta de Central: {response}")

    if response != "ACCEPTED":
        print("[Monitor] Conexi√≥n rechazada por Central. Cerrando...")
        central_conn.close()
        exit(1)

    return central_conn


def connect_engine(central_conn, engine_ip, engine_port, cp_id):
    """Se conecta y monitoriza el Engine"""
    global CP_STATUS, CURRENT_DRIVER, CHARGING_INFO, RUNNING
    last_status = ""
    last_driver = ""
    last_charging_info = {"kwh": 0, "cost": 0}

    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as client:
        client.connect((engine_ip, engine_port))
        print(f"[Monitor] Conectado a Engine {engine_ip}:{engine_port}")

        while RUNNING:
            try:
                msg = f"STATUS#{cp_id}"
                client.sendall(msg.encode())
                response = client.recv(1024).decode()
                
                parts = response.split("#")
                new_status = parts[0]
                
                # Actualizar informaci√≥n de carga
                if len(parts) >= 4:
                    new_driver = parts[1] if parts[1] != "None" else None
                    try:
                        new_kwh = float(parts[2])
                        new_cost = float(parts[3])
                        
                        # Solo actualizar si hay cambios
                        if (new_driver != last_driver or 
                            new_kwh != last_charging_info["kwh"] or 
                            new_cost != last_charging_info["cost"]):
                            
                            CURRENT_DRIVER = new_driver
                            CHARGING_INFO["kwh"] = new_kwh
                            CHARGING_INFO["cost"] = new_cost
                            
                            last_driver = new_driver
                            last_charging_info = {"kwh": new_kwh, "cost": new_cost}
                            
                    except:
                        pass
                else:
                    CURRENT_DRIVER = None
                    CHARGING_INFO = {"kwh": 0, "cost": 0}
                    last_driver = ""
                    last_charging_info = {"kwh": 0, "cost": 0}

                # Si ha cambiado el estado, notificar a Central
                if new_status and new_status != CP_STATUS:
                    print(f"[Monitor] Cambio detectado: {CP_STATUS} -> {new_status}")
                    print(f"          Notificando a Central...")
                    CP_STATUS = new_status
                    last_status = new_status

                    msg = f"CHANGE#{cp_id}#None#None#{new_status}"
                    central_conn.sendall(msg.encode())

                time.sleep(1)

            except Exception as e:
                print(f"[Monitor] Error con Engine: {e}")
                break


def handle_user_input(engine_ip, engine_port):
    """Maneja la entrada del usuario de forma no bloqueante"""
    global RUNNING, CP_ID, PAUSED
    
    while RUNNING:
        try:
            user_input = input()
            
            if user_input.strip() == "1":
                PAUSED = True  # Pausar actualizaci√≥n de pantalla
                request_manual_charge(engine_ip, engine_port)
                PAUSED = False  # Reanudar actualizaci√≥n
            elif user_input.strip() == "2":
                PAUSED = True  # Pausar actualizaci√≥n de pantalla
                show_detailed_status(engine_ip, engine_port)
                PAUSED = False  # Reanudar actualizaci√≥n
            elif user_input.strip() == "0":
                print(f"\n[Monitor] üëã Cerrando Monitor...")
                RUNNING = False
                break
                
        except KeyboardInterrupt:
            print(f"\n\n[Monitor] ‚ö†Ô∏è Interrupci√≥n detectada. Cerrando...")
            RUNNING = False
            break
        except:
            pass


def request_manual_charge(engine_ip, engine_port):
    """Solicita una carga manual al Engine"""
    global CP_ID, CP_STATUS
    
    clear_screen()
    print(f"\n{'‚îÄ'*70}")
    print(f"  SOLICITAR CARGA MANUAL")
    print(f"{'‚îÄ'*70}")
    
    if CP_STATUS != "ACTIVE":
        print(f"  ‚ö†Ô∏è  El CP no est√° disponible (Estado: {CP_STATUS})")
        print(f"  No se puede iniciar una carga manual")
        input("\n  Presiona ENTER para continuar...")
        return
    
    # Solicitar ID del conductor
    driver_id = input("\n  ID del conductor: ").strip()
    
    if not driver_id:
        print("  ‚ùå ID de conductor vac√≠o. Operaci√≥n cancelada.")
        input("\n  Presiona ENTER para continuar...")
        return
    
    # Solicitar duraci√≥n
    duration = input("  Duraci√≥n de la carga en segundos [7]: ").strip()
    
    if not duration:
        duration = 7
    else:
        try:
            duration = int(duration)
        except ValueError:
            print("  ‚ùå Duraci√≥n inv√°lida, usando 7 segundos")
            duration = 7
    
    print(f"\n  ‚ö° Solicitando carga manual:")
    print(f"     Conductor: {driver_id}")
    print(f"     Duraci√≥n: {duration} segundos")
    print(f"     Enviando al Engine...")
    
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as client:
            client.settimeout(3)
            client.connect((engine_ip, engine_port))
            
            # Enviar con driver_id real
            msg = f"MANUAL_CHARGE#{CP_ID}#{driver_id}#{duration}"
            client.sendall(msg.encode())
            
            response = client.recv(1024).decode()
            
            if response == "CHARGE_ACCEPTED":
                print(f"  ‚úÖ Solicitud aceptada")
                print(f"  La carga comenzar√° en unos momentos...")
                print(f"  El conductor {driver_id} ver√° la carga en su aplicaci√≥n")
            else:
                print(f"  ‚ùå Solicitud rechazada: {response}")
    except Exception as e:
        print(f"  ‚ùå Error al comunicarse con el Engine: {e}")
    
    time.sleep(2)


def show_detailed_status(engine_ip, engine_port):
    """Muestra el estado detallado con actualizaci√≥n en tiempo real"""
    global CP_ID, CP_ADDRESS, CP_PRICE, CP_STATUS, CURRENT_DRIVER, CHARGING_INFO, PAUSED
    
    # Crear evento para detectar cuando el usuario presiona ENTER
    import select
    import sys
    
    print("\n  Presiona ENTER para volver al men√∫ principal...")
    print("  (La pantalla se actualizar√° autom√°ticamente mientras tanto)\n")
    time.sleep(1)
    
    running = True
    
    while running and PAUSED:
        clear_screen()
        print(f"\n{'='*70}")
        print(f"  ESTADO DETALLADO - CP {CP_ID}")
        print(f"{'='*70}")
        print(f"  ID: {CP_ID}")
        print(f"  Direcci√≥n: {CP_ADDRESS}")
        print(f"  Precio: {CP_PRICE}‚Ç¨/kWh")
        
        # Mostrar estado con icono
        icon, status_text, color_text = get_status_display(CP_STATUS)
        print(f"  Estado actual: {icon} {status_text} ({color_text})")
        
        if CURRENT_DRIVER:
            print(f"\n  üìä CARGA ACTIVA:")
            print(f"  {'-'*66}")
            print(f"     Conductor: {CURRENT_DRIVER}")
            print(f"     Consumo actual: {CHARGING_INFO['kwh']:.2f} kWh")
            print(f"     Importe acumulado: {CHARGING_INFO['cost']:.2f}‚Ç¨")
            print(f"  {'-'*66}")
        else:
            print(f"\n  ‚è∏Ô∏è  Sin carga activa")
        
        print(f"\n  üîó CONEXI√ìN ENGINE:")
        print(f"  {'-'*66}")
        print(f"     IP: {engine_ip}")
        print(f"     Puerto: {engine_port}")
        
        # Intentar ping al Engine
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as client:
                client.settimeout(2)
                client.connect((engine_ip, engine_port))
                print(f"     Estado: ‚úÖ CONEXI√ìN ACTIVA")
        except Exception as e:
            print(f"     Estado: ‚ùå ERROR DE CONEXI√ìN")
        
        print(f"  {'-'*66}")
        print(f"{'='*70}")
        print(f"\n  ‚ÑπÔ∏è  Esta pantalla se actualiza cada segundo")
        print(f"  üëâ Presiona ENTER para volver al men√∫ principal")
        print(f"{'='*70}\n")
        
        # Comprobar si hay entrada disponible (multiplataforma)
        if os.name == 'nt':  # Windows
            import msvcrt
            if msvcrt.kbhit():
                key = msvcrt.getch()
                if key == b'\r':  # ENTER en Windows
                    running = False
        else:  # Linux/Unix
            import select
            # Comprobar si hay entrada disponible sin bloquear
            i, o, e = select.select([sys.stdin], [], [], 0)
            if i:
                line = sys.stdin.readline()
                running = False
        
        if running:
            time.sleep(1)


def main(engine_ip, engine_port, central_ip, central_port, cp_id):
    """Funci√≥n principal"""
    global CP_ID, RUNNING
    CP_ID = cp_id
    
    # Paso 1: Solicitar configuraci√≥n a Central
    print(f"[Monitor] Solicitando configuraci√≥n a Central para CP: {cp_id}")
    if not get_config_from_central(central_ip, central_port, cp_id):
        print("[Monitor] Error cr√≠tico: no se pudo obtener la configuraci√≥n de Central")
        return
    
    # Paso 2: Enviar configuraci√≥n al Engine
    print(f"[Monitor] Enviando configuraci√≥n al Engine...")
    if not send_config_to_engine(engine_ip, engine_port, cp_id):
        print("[Monitor] Error cr√≠tico: no se pudo configurar el Engine")
        return
    
    # Paso 3: Autenticarse con Central
    print(f"[Monitor] Autentic√°ndose con Central...")
    central_conn = connect_central(central_ip, central_port, cp_id)

    # Paso 4: Crear hilo para monitorizar Engine
    threading.Thread(
        target=connect_engine, 
        args=(central_conn, engine_ip, engine_port, cp_id), 
        daemon=True
    ).start()

    # Paso 5: Sistema inicializado
    print(f"[Monitor] Sistema completamente inicializado para CP: {cp_id}")
    print(f"[Monitor] Iniciando pantalla de monitorizaci√≥n en tiempo real...")
    time.sleep(2)
    
    # Paso 6: Iniciar pantalla de monitorizaci√≥n en hilo separado
    threading.Thread(target=display_monitor_screen, daemon=True).start()
    
    # Paso 7: Manejar entrada del usuario
    handle_user_input(engine_ip, engine_port)
    
    # Cerrar conexiones
    RUNNING = False
    central_conn.close()
    print(f"  ‚úÖ Monitor {cp_id} finalizado correctamente.\n")


def args():
    """Leer argumentos de l√≠nea de comandos"""
    return sys.argv[1], int(sys.argv[2]), sys.argv[3], int(sys.argv[4]), sys.argv[5]


if __name__ == "__main__":
    engine_ip, engine_port, central_ip, central_port, cp_id = args()
    main(engine_ip, engine_port, central_ip, central_port, cp_id)